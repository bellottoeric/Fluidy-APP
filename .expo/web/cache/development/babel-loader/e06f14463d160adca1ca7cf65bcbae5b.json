{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as rssParser from 'react-native-rss-parser';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function getCategories(_ref) {\n  var _arguments = arguments;\n  var setReady = _ref.setReady;\n  return new Promise(function _callee2(resolve, reject) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              fetch('http://137.74.192.151:8444/v1/categories').then(function _callee(response) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _regeneratorRuntime.awrap(response.text());\n\n                      case 2:\n                        response = _context.sent;\n                        _context.next = 5;\n                        return _regeneratorRuntime.awrap(AsyncStorage.setItem('categories', JSON.stringify(response)));\n\n                      case 5:\n                        setReady(true);\n                        resolve();\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (err) {\n                console.log(err);\n                setReady(false);\n                resolve();\n              });\n            } catch (e) {\n              console.log('Error in function', _arguments.callee.name, e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n}","map":{"version":3,"sources":["/home/popeye/project/fluidy/Fluidy-APP/src/controller/getCategories.js"],"names":["rssParser","AsyncStorage","getCategories","setReady","Promise","resolve","reject","fetch","then","response","text","setItem","JSON","stringify","catch","err","console","log","e","arguments","callee","name"],"mappings":";AAAA,OAAO,KAAKA,SAAZ,MAA2B,yBAA3B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,eAAe,SAASC,aAAT,OAAmC;AAAA;AAAA,MAAXC,QAAW,QAAXA,QAAW;AAC9C,SAAQ,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAChB,gBAAI;AACAC,cAAAA,KAAK,CAAC,0CAAD,CAAL,CACKC,IADL,CACU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDACeA,QAAQ,CAACC,IAAT,EADf;;AAAA;AACFD,wBAAAA,QADE;AAAA;AAAA,yDAEIR,YAAY,CAACU,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAnC,CAFJ;;AAAA;AAGFN,wBAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,wBAAAA,OAAO;;AAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADV,EAMOS,KANP,CAMa,UAACC,GAAD,EAAS;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,gBAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,gBAAAA,OAAO;AACV,eAVL;AAWH,aAZD,CAYE,OAAOa,CAAP,EAAU;AACRF,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,UAAS,CAACC,MAAV,CAAiBC,IAAlD,EAAwDH,CAAxD;AACH;;AAfe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAR;AAiBH","sourcesContent":["import * as rssParser from 'react-native-rss-parser';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function getCategories({setReady}) {\n    return (new Promise(async (resolve, reject) => {\n        try {\n            fetch('http://137.74.192.151:8444/v1/categories')\n                .then(async (response) => {\n                    response = await response.text()\n                    await AsyncStorage.setItem('categories', JSON.stringify(response))\n                    setReady(true)\n                    resolve()\n                }).catch((err)=>  {\n                    console.log(err)\n                    setReady(false)\n                    resolve()\n                })\n        } catch (e) {\n            console.log('Error in function', arguments.callee.name, e)\n        }\n    }))\n}\n\n/* fetch('https://news.google.com/rss/search?gl=US&hl=en-US&num=10&q=unicorns&ceid=US:en')\n        .then((response) => response.text())\n        .then((responseData) => rssParser.parse(responseData))\n        .then((rss) => {\n            console.log(rss.title);\n            console.log(rss.items.length);\n        }); */"]},"metadata":{},"sourceType":"module"}