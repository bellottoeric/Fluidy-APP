{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/popeye/project/fluidy/Fluidy-APP/src/CategoriesComponent.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Updates from 'expo-updates';\nimport { ListItem, CheckBox, Divider } from 'react-native-elements';\nexport default function Categories() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      categories = _useState2[0],\n      setCategories = _useState2[1];\n\n  useEffect(function () {\n    function checkCategories() {\n      var res, value, i;\n      return _regeneratorRuntime.async(function checkCategories$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              res = [];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('categories'));\n\n            case 3:\n              value = _context.sent;\n\n              if (value !== null) {\n                value = JSON.parse(JSON.parse(value));\n\n                for (i in value) {\n                  res.push({\n                    \"Title\": i,\n                    \"content\": value[i]\n                  });\n                }\n\n                setCategories(res);\n              } else {\n                alert('Lapp na pas réussi a get les categories EN DB a changer 3248678');\n                Updates.reloadAsync();\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    checkCategories();\n  }, []);\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, categories[0] && categories.map(function (item, index) {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.titleCategory,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, item.Title), item.content.map(function (l, i) {\n      return React.createElement(ListItem, {\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }\n      }, React.createElement(ListItem.Content, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 33\n        }\n      }, React.createElement(ListItem.Title, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 37\n        }\n      }, React.createElement(CheckBox, {\n        checked: false,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 41\n        }\n      }), React.createElement(Text, {\n        style: styles.textSubcategory,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 41\n        }\n      }, l))));\n    }), React.createElement(View, {\n      style: {\n        borderBottomColor: 'black',\n        borderBottomWidth: 1,\n        marginTop: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }));\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 10,\n    marginBottom: 10,\n    flex: 1,\n    width: Dimensions.get('window').width\n  },\n  scrollView: {\n    marginHorizontal: 20\n  },\n  titleCategory: {\n    fontSize: 25\n  },\n  textSubcategory: {\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/home/popeye/project/fluidy/Fluidy-APP/src/CategoriesComponent.js"],"names":["React","useState","useEffect","AsyncStorage","Updates","ListItem","CheckBox","Divider","Categories","categories","setCategories","checkCategories","res","getItem","value","JSON","parse","i","push","alert","reloadAsync","styles","container","scrollView","map","item","index","titleCategory","Title","content","l","textSubcategory","borderBottomColor","borderBottomWidth","marginTop","StyleSheet","create","marginBottom","flex","width","Dimensions","get","marginHorizontal","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, SafeAreaView, ScrollView, View, Dimensions } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Updates from 'expo-updates';\nimport { ListItem, CheckBox, Divider } from 'react-native-elements'\n\nexport default function Categories() {\n    const [categories, setCategories] = useState([])\n\n    useEffect(() => {\n        async function checkCategories() {\n            var res = []\n            var value = await AsyncStorage.getItem('categories')\n            if (value !== null) {\n                value = JSON.parse( JSON.parse(value))\n                for (var i in value) {\n                    res.push({\"Title\": i, \"content\": value[i]})\n                }\n                setCategories(res)\n            } else {\n                alert('Lapp na pas réussi a get les categories EN DB a changer 3248678')\n                Updates.reloadAsync()\n            }\n        }\n        checkCategories();\n    }, []);\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView style={styles.scrollView}>\n            {categories[0] && \n                categories.map((item, index) => (\n                    <View>\n                        <Text style={styles.titleCategory}>{item.Title}</Text>\n                        {item.content.map((l, i) => (\n                            <ListItem key={i} >\n                                <ListItem.Content >\n                                    <ListItem.Title >\n                                        <CheckBox\n                                            checked={false}\n                                        />\n                                        <Text style={styles.textSubcategory}>{l}</Text>\n                                    </ListItem.Title>\n                                </ListItem.Content>\n                            </ListItem>\n                        ))}\n                        <View\n                            style={{\n                                borderBottomColor: 'black',\n                                borderBottomWidth: 1,\n                                marginTop: 10\n                            }}\n                        />\n                    </View>\n                ))\n            }\n            </ScrollView>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        marginTop: 10,\n        marginBottom: 10,\n        flex: 1,\n        width: Dimensions.get('window').width,\n    },\n    scrollView: {\n        marginHorizontal: 20,\n    },\n    titleCategory: {\n        fontSize: 25,\n    },\n    textSubcategory: {\n        fontSize: 20,\n    }\n});\n"]},"metadata":{},"sourceType":"module"}