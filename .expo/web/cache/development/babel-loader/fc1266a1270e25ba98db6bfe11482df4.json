{"ast":null,"code":"var DOMParser = require('xmldom').DOMParser;\n\nvar rssV2Parser = require(\"./parsers/rssv2\");\n\nvar atomV1Parser = require(\"./parsers/atomv1\");\n\nvar getParser = function getParser(document) {\n  var isRssSpecification = document.getElementsByTagName('channel')[0] !== undefined;\n  var isAtomSpecification = document.getElementsByTagName('feed')[0] !== undefined;\n\n  if (isRssSpecification) {\n    return rssV2Parser;\n  }\n\n  if (isAtomSpecification) {\n    return atomV1Parser;\n  }\n\n  return null;\n};\n\nexports.parse = function (feed) {\n  return new Promise(function (resolve, reject) {\n    var document = new DOMParser({\n      errorHandler: function errorHandler(_level, msg) {\n        reject(msg);\n      }\n    }).parseFromString(feed, 'text/xml');\n    var parser = getParser(document);\n\n    if (!parser) {\n      reject('Unable to find any RSS element in feed');\n    }\n\n    var parsedFeed = parser.parse(document);\n    resolve(parsedFeed);\n  });\n};","map":{"version":3,"sources":["/home/popeye/project/fluidy/Fluidy-APP/node_modules/react-native-rss-parser/index.js"],"names":["DOMParser","require","rssV2Parser","atomV1Parser","getParser","document","isRssSpecification","getElementsByTagName","undefined","isAtomSpecification","exports","parse","feed","Promise","resolve","reject","errorHandler","_level","msg","parseFromString","parser","parsedFeed"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,SAApC;;AACA,IAAME,WAAW,GAAGD,OAAO,mBAA3B;;AACA,IAAME,YAAY,GAAGF,OAAO,oBAA5B;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;AAC9B,MAAMC,kBAAkB,GACtBD,QAAQ,CAACE,oBAAT,CAA8B,SAA9B,EAAyC,CAAzC,MAAgDC,SADlD;AAEA,MAAMC,mBAAmB,GACvBJ,QAAQ,CAACE,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,MAA6CC,SAD/C;;AAGA,MAAIF,kBAAJ,EAAwB;AACtB,WAAOJ,WAAP;AACD;;AAED,MAAIO,mBAAJ,EAAyB;AACvB,WAAON,YAAP;AACD;;AAED,SAAO,IAAP;AACD,CAfD;;AAiBAO,OAAO,CAACC,KAAR,GAAgB,UAACC,IAAD;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAMV,QAAQ,GAAG,IAAIL,SAAJ,CAAc;AAC7BgB,MAAAA,YAAY,EAAE,sBAACC,MAAD,EAASC,GAAT,EAAiB;AAC7BH,QAAAA,MAAM,CAACG,GAAD,CAAN;AACD;AAH4B,KAAd,EAIdC,eAJc,CAIEP,IAJF,EAIQ,UAJR,CAAjB;AAMA,QAAMQ,MAAM,GAAGhB,SAAS,CAACC,QAAD,CAAxB;;AAEA,QAAI,CAACe,MAAL,EAAa;AACXL,MAAAA,MAAM,CAAC,wCAAD,CAAN;AACD;;AAED,QAAMM,UAAU,GAAGD,MAAM,CAACT,KAAP,CAAaN,QAAb,CAAnB;AAEAS,IAAAA,OAAO,CAACO,UAAD,CAAP;AACD,GAhBD,CADc;AAAA,CAAhB","sourcesContent":["const DOMParser = require('xmldom').DOMParser;\r\nconst rssV2Parser = require('./parsers/rssv2');\r\nconst atomV1Parser = require('./parsers/atomv1');\r\n\r\nconst getParser = (document) => {\r\n  const isRssSpecification =\r\n    document.getElementsByTagName('channel')[0] !== undefined;\r\n  const isAtomSpecification =\r\n    document.getElementsByTagName('feed')[0] !== undefined;\r\n\r\n  if (isRssSpecification) {\r\n    return rssV2Parser;\r\n  }\r\n\r\n  if (isAtomSpecification) {\r\n    return atomV1Parser;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexports.parse = (feed) =>\r\n  new Promise((resolve, reject) => {\r\n    const document = new DOMParser({\r\n      errorHandler: (_level, msg) => {\r\n        reject(msg);\r\n      },\r\n    }).parseFromString(feed, 'text/xml');\r\n\r\n    const parser = getParser(document);\r\n\r\n    if (!parser) {\r\n      reject('Unable to find any RSS element in feed');\r\n    }\r\n\r\n    const parsedFeed = parser.parse(document);\r\n\r\n    resolve(parsedFeed);\r\n  });\r\n"]},"metadata":{},"sourceType":"script"}